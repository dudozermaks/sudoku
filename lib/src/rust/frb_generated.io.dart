// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/sudoku.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  Map<String, int> dco_decode_Map_String_u_32(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(String, int)> dco_decode_list_record_string_u_32(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  (String, int) dco_decode_record_string_u_32(dynamic raw);

  @protected
  (int, Map<String, int>, bool) dco_decode_record_u_32_map_string_u_32_bool(
      dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  Map<String, int> sse_decode_Map_String_u_32(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(String, int)> sse_decode_list_record_string_u_32(
      SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  (String, int) sse_decode_record_string_u_32(SseDeserializer deserializer);

  @protected
  (int, Map<String, int>, bool) sse_decode_record_u_32_map_string_u_32_bool(
      SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_record_string_u_32> cst_encode_Map_String_u_32(
      Map<String, int> raw) {
    return cst_encode_list_record_string_u_32(
        raw.entries.map((e) => (e.key, e.value)).toList());
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_record_string_u_32>
      cst_encode_list_record_string_u_32(List<(String, int)> raw) {
    final ans = wire.cst_new_list_record_string_u_32(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_record_string_u_32(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  void cst_api_fill_to_wire_record_string_u_32(
      (String, int) apiObj, wire_cst_record_string_u_32 wireObj) {
    wireObj.field0 = cst_encode_String(apiObj.$1);
    wireObj.field1 = cst_encode_u_32(apiObj.$2);
  }

  @protected
  void cst_api_fill_to_wire_record_u_32_map_string_u_32_bool(
      (int, Map<String, int>, bool) apiObj,
      wire_cst_record_u_32_map_string_u_32_bool wireObj) {
    wireObj.field0 = cst_encode_u_32(apiObj.$1);
    wireObj.field1 = cst_encode_Map_String_u_32(apiObj.$2);
    wireObj.field2 = cst_encode_bool(apiObj.$3);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_Map_String_u_32(
      Map<String, int> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_string_u_32(
      List<(String, int)> self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_record_string_u_32(
      (String, int) self, SseSerializer serializer);

  @protected
  void sse_encode_record_u_32_map_string_u_32_bool(
      (int, Map<String, int>, bool) self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('frbgen_sudoku_dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  WireSyncRust2DartDco wire_generate_sudoku() {
    return _wire_generate_sudoku();
  }

  late final _wire_generate_sudokuPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
          'frbgen_sudoku_wire_generate_sudoku');
  late final _wire_generate_sudoku =
      _wire_generate_sudokuPtr.asFunction<WireSyncRust2DartDco Function()>();

  WireSyncRust2DartDco wire_get_rating(
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sudoku_string,
  ) {
    return _wire_get_rating(
      sudoku_string,
    );
  }

  late final _wire_get_ratingPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_sudoku_wire_get_rating');
  late final _wire_get_rating = _wire_get_ratingPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire_get_unique_solution(
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sudoku_string,
  ) {
    return _wire_get_unique_solution(
      sudoku_string,
    );
  }

  late final _wire_get_unique_solutionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_sudoku_wire_get_unique_solution');
  late final _wire_get_unique_solution =
      _wire_get_unique_solutionPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_init_app(
    int port_,
  ) {
    return _wire_init_app(
      port_,
    );
  }

  late final _wire_init_appPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_sudoku_wire_init_app');
  late final _wire_init_app =
      _wire_init_appPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_sudoku_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_record_string_u_32> cst_new_list_record_string_u_32(
    int len,
  ) {
    return _cst_new_list_record_string_u_32(
      len,
    );
  }

  late final _cst_new_list_record_string_u_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_record_string_u_32> Function(
              ffi.Int32)>>('frbgen_sudoku_cst_new_list_record_string_u_32');
  late final _cst_new_list_record_string_u_32 =
      _cst_new_list_record_string_u_32Ptr.asFunction<
          ffi.Pointer<wire_cst_list_record_string_u_32> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_record_string_u_32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;

  @ffi.Uint32()
  external int field1;
}

final class wire_cst_list_record_string_u_32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_record_string_u_32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_record_u_32_map_string_u_32_bool extends ffi.Struct {
  @ffi.Uint32()
  external int field0;

  external ffi.Pointer<wire_cst_list_record_string_u_32> field1;

  @ffi.Bool()
  external bool field2;
}
